@import "MochaJSDelegate.js";
@import "unit.cocoascript";
var sketch = require('sketch');

function onRun(context) {
  //设置窗口宽高
  var panelWidth = 800;
  var panelHeight = 500;

  // Create an NSThread dictionary with a specific identifier
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "co.getstyle";

  // 如果已存在该panel了，则返回、不再创建新panel
  if (threadDictionary[identifier]) return;

  // 新建一个panel
  var panel = NSPanel.alloc().init();
  //根据给定的矩形框设置窗口框架矩形的原点和大小，从而在屏幕上设置其位置和大小
  panel.setFrame_display(NSMakeRect(0, 0, panelWidth, panelHeight), true);
  
  panel.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask | NSFullSizeContentViewWindowMask);
  //设置panel背景色
  panel.setBackgroundColor(NSColor.whiteColor());

  // 设置title bar
  panel.title = "";
  panel.titlebarAppearsTransparent = true;

  // 使panel居中并focus panel
  panel.center();
  panel.makeKeyAndOrderFront(null);
  panel.setLevel(NSFloatingWindowLevel);

  COScript.currentCOScript().setShouldKeepAround_(true);

  // 隐藏panel的最小化及最大化按钮
  panel.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
  panel.standardWindowButton(NSWindowZoomButton).setHidden(true);

  // 设置一个模糊背景阴影
  var vibrancy = NSVisualEffectView.alloc().initWithFrame(NSMakeRect(0, 0, panelWidth, panelHeight));
  vibrancy.setAppearance(NSAppearance.appearanceNamed(NSAppearanceNameVibrantLight));
  vibrancy.setBlendingMode(NSVisualEffectBlendingModeBehindWindow);

  // 在panel中新建一个webView
  var webView = WebView.alloc().initWithFrame(NSMakeRect(0, 0, panelWidth, panelHeight - 44));
  // 获取webView的url
  var request = NSURLRequest.requestWithURL(context.plugin.urlForResourceNamed("panel.html"));
  webView.mainFrame().loadRequest(request);//加载webView
  webView.setDrawsBackground(false);

  // 获取webView里的window对象
  var windowObject = webView.windowScriptObject();

  // 创建delegate
  var delegate = new MochaJSDelegate({

    // 监听webView是否加载完毕
    "webView:didFinishLoadForFrame:": (function(webView, webFrame) {

        var selection = context.document.selectedLayers().layers();
        //log(selection);
        var textCSS = getStyle(selection);
        //log("textCSS:" + textCSS);
        // 调用webView中的函数，更新页面的数据展示
        windowObject.evaluateWebScript("updatePreview('" + textCSS + "')");
    })
  })

  // Set the delegate on the WebView
  webView.setFrameLoadDelegate_(delegate.getClassInstance());

  // 把这个webView加到窗口中
  panel.contentView().addSubview(vibrancy);
  panel.contentView().addSubview(webView);

  // 将这个panel存储起来
  threadDictionary[identifier] = panel;

  var closeButton = panel.standardWindowButton(NSWindowCloseButton);

  // Assign a function to the Close button
  closeButton.setCOSJSTargetFunction(function(sender) {
    panel.close();

    // Remove the reference to the panel
    threadDictionary.removeObjectForKey(identifier);

    // Stop the plugin
    COScript.currentCOScript().setShouldKeepAround_(false);
  });
}

var onSelectionChanged = function(context) {
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "co.getstyle";
  
  //看是否存在了panel
  if (threadDictionary[identifier]) {
    var panel = threadDictionary[identifier];

    // 获取已有的panel的webView
    var webView = panel.contentView().subviews()[1];
    var windowObject = webView.windowScriptObject();

    // 获取选择的图层，并处理
    var selection = context.actionContext.document.selectedLayers().layers();    
<<<<<<< HEAD
    var textCSS = getSpacings(selection);
    log("spacing" + selection);
    log("textCSS:" + textCSS);
    // 执行webView中的函数updatePreview
=======
    var textCSS = getStyle(selection);
    //log("spacing" + selection);
    //log("textCSS:" + textCSS);
>>>>>>> getTextStyle
    windowObject.evaluateWebScript("updatePreview('" + textCSS + "')");
    
  }
};
