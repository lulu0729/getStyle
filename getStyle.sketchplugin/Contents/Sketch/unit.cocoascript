

var	getRect = function(layer){
     var rect = layer.absoluteRect();
        return {
            x: Math.round(rect.x()),
            y: Math.round(rect.y()),
            width: Math.round(rect.width()),
            height: Math.round(rect.height()),
            maxX: Math.round(rect.x() + rect.width()),
            maxY: Math.round(rect.y() + rect.height()),
            setX: function(x){ rect.setX(x); this.x = x; this.maxX = this.x + this.width; },
            setY: function(y){ rect.setY(y); this.y = y; this.maxY = this.y + this.height; },
            setWidth: function(width){ rect.setWidth(width); this.width = width; this.maxX = this.x + this.width; },
            setHeight: function(height){ rect.setHeight(height); this.height = height; this.maxY = this.y + this.height; }
        };
    };
var convertUnit = function(rect){
        //log("width:"+rect.width * 100/750+ "vw;");
        //log("height:"+rect.height * 100/750+ "vw;");
        var textCSS ="width:" + (rect.width * 100/750).toFixed(4) + "vw;<br>" + "height:" + (rect.height * 100/750).toFixed(4)+ "vw;<br>"
        return textCSS;
    };
var convertPosition = function(rect1,rect2){
    var left = Math.round(rect1.x - rect2.x),
        top = Math.round(rect1.y - rect2.y),
        right = Math.round(rect1.maxX - rect2.maxX),
        bottom = Math.round(rect1.maxY - rect2.maxY);
    var textCSS = "left:" + (left * 100/750).toFixed(4) + "vw;<br>" + "top:" + (top * 100/750).toFixed(4)+ "vw;<br>" + "right:" + (right * 100/750).toFixed(4)+ "vw;<br>"+ "bottom:" + (bottom * 100/750).toFixed(4)+ "vw;<br>"
    //log(textCSS);
    return textCSS;
}
var getTextStyle = function(text){
    var textCSS = '';
    var attributes = text.attributedString().treeAsDictionary().value.attributes;
    var fontSize = text.fontSize(),//获取font-size
        lineHeight = text.lineHeight();//获取line-height
    var color;
        
        if(fontSize){
            textCSS += "font-size:" + Math.round(fontSize/2) + "px;<br>";
            //log(textCSS);
        }
        if(lineHeight){
            textCSS += "line-height:" + Math.round(lineHeight/2) + "px;<br>";
            //log(textCSS);
        }
    attributes.forEach(function(attr) {
        color = attr.MSAttributedStringColorAttribute.value + ";<br>";
    });
    textCSS += "color:" + color;
    var shadow = topShadow(text.style());
    if (shadow) {
      textCSS += "text-shadow:" + rgbaCode(shadow.color())  + ' ' + shadow.offsetX()/2 + "px " + shadow.offsetY()/2 + "px " + shadow.blurRadius()/2 + "px;<br>";
    }

    return textCSS
}
function getLayerStyle(layer) {

  var textCSS = '';

  var fill = topFill(layer.style());
  log(fill.type);
  if (fill.type == 0) {
    textCSS += "background-color:" + rgbaCode(fill.bg.color()) + ";<br>";
  }else if(fill.type == 1){  
    if(fill.bg.indexOf('deg') != -1){//判断是不是linear-gradient
      log(fill.bg.indexOf('deg'));
      textCSS += "background-image:" + "linear-gradient(" + fill.bg + ");<br>";
    }else{//判断是不是radial-gradient
      textCSS += "background-image:" + "radial-gradient(" + fill.bg + ");<br>";
    }
  }
  var borderRadius = layer.layers().firstObject().cornerRadiusFloat();
  /*if (isCircle(layer)) {
    textCSS += "border-radius:" + framerObject.width / 2 + "px;<br>";
  } else {*/
  if(borderRadius){
    textCSS += "border-radius:" + Math.ceil(borderRadius/2) + "px;<br>";
  }

  var border = topBorder(layer.style());
  if (border) {
    textCSS += "border:" + Math.ceil(border.thickness()/2) + "px " + " solid " + rgbaCode(border.color()) + ";<br>";
    
  }

  var shadow = topShadow(layer.style());
  if (shadow) {
    textCSS += "box-shadow:" + rgbaCode(shadow.color())  + ' ' + Math.ceil(shadow.offsetX()/2) + "px " + Math.ceil(shadow.offsetY()/2) + "px " + Math.ceil(shadow.blurRadius()/2) + "px;<br>";
  }

  var opacity = layer.style().contextSettings().opacity();
  if (opacity != 1) {
    textCSS += "opacity:" + opacity + ";<br>";
  }

  return textCSS;
}
function rgbaCode(colour) {
  var red = Math.round(colour.red() * 255);
  var green = Math.round(colour.green() * 255);
  var blue = Math.round(colour.blue() * 255);

  return 'rgba(' + red + ',' + green + ',' + blue + ',' + colour.alpha().toFixed(2) + ')';
}
function topFill(style) {
  var fills = style.enabledFills(),
      fill = {
        type: null,
        bg: null
      };

  var i, len = null;
  for (i = 0, len = fills.length; i < len; i++) {
    var fillType = fills[i].fillType();
    log(fillType);
    if (fillType == 0) {
      fill.bg = fills[i];
      log(fill.bg);
      log(fill.type);
    }else{
      fill.type = fillType;
      fill.bg = fills[i].gradient().gradientStringWithMasterAlpha(5);
      log(fill.bg);
      log(fill.type);
    }

  }

  return fill;
}

function topBorder(style) {
  var borders = style.enabledBorders();

  var i, len, border = null;
  for (i = 0, len = borders.length; i < len; i++) {
    var fillType = borders[i].fillType();
    if (fillType == 0) {
      border = borders[i];
    }
  }

  return border;
}

function topShadow(style) {
  var shadows = style.enabledShadows();
  var len = shadows.length;

  if (len == 0) {
    return null;
  } else {
    return shadows[len - 1];
  }
}

var getStyle = function(selection){
        var style;
            //log("selection.count:"+selection.count());
        if( !(selection.count() > 0 && selection.count() < 3) ){
            log("Select 1 or 2 layers to get style!");
            style = "Select 1 or 2 layers to get style!"
            return style;
        }else if(selection.count() == 1){
            log("Select 1!");
            var targetRect = this.getRect(selection[0]);
            //转换宽高单位
            style = this.convertUnit(targetRect);
            
            //判断是否为shape
            if(selection[0].class() == 'MSShapeGroup'){
              log('is shape');
              style += this.getLayerStyle(selection[0]);
            }else{
              log(selection[0].class());
            }
            //判断是否为text
            if(selection[0].class() == 'MSTextLayer'){
              log('is text');
              style += this.getTextStyle(selection[0]);
            }else{
              log(selection[0].class());
            }
                    //log(selection[0].CSSAttributes());
            return style;
        }else if(selection.count() == 2){

            var target = (selection.count() == 1)? selection[0]: selection[1],
                layer = (selection.count() == 1)? this.current: selection[0];
            var targetRect = this.getRect(target),
                layerRect = this.getRect(layer);
            style = this.convertPosition(targetRect,layerRect);
            log(style);
            
            return style;
        }
    }
